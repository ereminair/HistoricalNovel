import os
from lib2to3.fixes.fix_input import context

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import logging
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

game_data = {
    1: {
        "title": "üü• –¢–û–í–ê–†–ò–© –°–¢–ê–õ–ò–ù, –°–û–í–ï–¢–£–ï–¢–°–Ø –ù–ê–†–û–î!",
        "description": (
            "1945 –≥–æ–¥. –ü–æ–±–µ–¥–∞ –Ω–∞–¥ —Ñ–∞—à–∏–∑–º–æ–º –æ–¥–µ—Ä–∂–∞–Ω–∞, –Ω–æ –Ω–æ–≤—ã–π –≤—Ä–∞–≥ —É–∂–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ–≤—É ‚Äî –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∏–º–ø–µ—Ä–∏–∞–ª–∏–∑–º.\n\n"
            "–¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç:\n"
            "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Å—É–¥—å–±–æ–Ω–æ—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è ‚Äî –æ—Ç —è–¥–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–π\n"
            "‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –º–µ–∂–¥—É –≤–æ–µ–Ω–Ω–æ–π –º–æ—â—å—é, —ç–∫–æ–Ω–æ–º–∏–∫–æ–π –∏ –≤–ª–∏—è–Ω–∏–µ–º\n"
            "‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ö–æ–¥ –•–æ–ª–æ–¥–Ω–æ–π –≤–æ–π–Ω—ã ‚Äî —Ç—Ä–∏—É–º—Ñ —Å–æ—Ü–∏–∞–ª–∏–∑–º–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –°–°–°–†\n\n"
            "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n\n"
            "–í—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π (–∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É)\n\n"
            "–°–ª–µ–¥–∏ –∑–∞ —Å–∫—Ä—ã—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
            "–î–æ–∂–∏–≤–∏ –¥–æ 1953 –≥–æ–¥–∞ –∏ —É–∑–Ω–∞–π, –∫–∞–∫–∏–º —Å—Ç–∞–ª –º–∏—Ä\n\n"
            "\"–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–Ω–∞–µ—Ç —Å–æ—Å–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏—è... –Ω–æ —Å–µ–≥–æ–¥–Ω—è –æ–Ω–∞ –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö!\""
        ),
        "welcome_message": "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:",
        "choices": [
            {"text": "–ü–æ—Ç—Å–¥–∞–º—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (1945)", "callback": "potsdam_conference"},
            {"text": "–§—É–ª—Ç–æ–Ω—Å–∫–∞—è —Ä–µ—á—å –ß–µ—Ä—á–∏–ª–ª—è (1946)", "callback": "churchill_speech"},
            {"text": "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback": "back_to_main"}
        ]
    },
    2: {
        "title": "–§—É–ª—Ç–æ–Ω—Å–∫–∞—è —Ä–µ—á—å –ß–µ—Ä—á–∏–ª–ª—è (1946)",
        "description": "–ú–∞—Ä—Ç 1946. –ß–µ—Ä—á–∏–ª–ª—å –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –§—É–ª—Ç–æ–Ω—Å–∫—É—é —Ä–µ—á—å –æ ¬´–∂–µ–ª–µ–∑–Ω–æ–º –∑–∞–Ω–∞–≤–µ—Å–µ¬ª...",
        "choices": [
            {"text": "–†–µ–∑–∫–æ –æ—Å—É–¥–∏—Ç—å –≤ ¬´–ü—Ä–∞–≤–¥–µ¬ª", "callback": "choice_churchill_0", "effects": {"propaganda": 5}},
            {"text": "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", "callback": "choice_churchill_1", "effects": {"western_relations": 3}},
            {"text": "–¢–∞–π–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å –±–µ—Ä–ª–∏–Ω—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å", "callback": "choice_churchill_2",
             "effects": {"military": 7, "risk": 10}}
        ]
    },

    3: {
        "title": "–ü–æ—Ç—Å–¥–∞–º—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (1945)",
        "description": (
            "–ò—é–ª—å 1945. –°–®–ê —Å–æ–æ–±—â–∏–ª–∏ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–∏ –∞—Ç–æ–º–Ω–æ–π –±–æ–º–±—ã. "
            "–¢–µ–ø–µ—Ä—å –°–°–°–† –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –Ω–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–µ–π—Å—Ç–≤–∏–π:"
        ),
        "choices": [
            {
                "text": "‚ò¢Ô∏è –£—Å–∫–æ—Ä–∏—Ç—å —è–¥–µ—Ä–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ª—é–±–æ–π —Ü–µ–Ω–æ–π!",
                "effects": {
                    "military": +3,
                    "economy": -2,
                    "nuclear_research": +2
                },
                "result": (
                    "–ö 1949 –≥–æ–¥—É –°–°–°–† —Å–æ–∑–¥–∞–µ—Ç –∞—Ç–æ–º–Ω—É—é –±–æ–º–±—É, "
                    "–Ω–æ —ç–∫–æ–Ω–æ–º–∏–∫–∞ —Å—Ç—Ä–∞–¥–∞–µ—Ç –æ—Ç –ø–µ—Ä–µ–∫–æ—Å–∞ –≤ –≤–æ–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä."
                ),
                "next_event": "–®–ø–∏–æ–Ω—Å–∫–∏–π —Å–∫–∞–Ω–¥–∞–ª (1946)"
            },
            {
                "text": "üïäÔ∏è –£–∫—Ä–µ–ø–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø–µ",
                "effects": {
                    "europe_influence": +2,
                    "us_relations": -3
                },
                "result": (
                    "–ö–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç—ã –≤ –ü–æ–ª—å—à–µ –∏ –ß–µ—Ö–æ—Å–ª–æ–≤–∞–∫–∏–∏. "
                    "–ë–µ—Ä–ª–∏–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è '–≥–æ—Ä—è—á–µ–π —Ç–æ—á–∫–æ–π' —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–π–Ω—ã."
                ),
                "next_event": "–ë–µ—Ä–ª–∏–Ω—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (1948)"
            },
            {
                "text": "ü§ù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ó–∞–ø–∞–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã",
                "effects": {
                    "us_relations": +2,
                    "military": -1
                },
                "result": (
                    "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –°–®–ê. "
                    "–ê–º–µ—Ä–∏–∫–∞–Ω—Ü—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç '–ü–ª–∞–Ω –ú–∞—Ä—à–∞–ª–ª–∞' –¥–ª—è –°–°–°–†."
                ),
                "next_event": "–ü–ª–∞–Ω –ú–∞—Ä—à–∞–ª–ª–∞ (1947)"
            }
        ]
    },
    4: {
        "title": "–®–ø–∏–æ–Ω—Å–∫–∏–π —Å–∫–∞–Ω–¥–∞–ª (1946)",
        "description": (
            "–ê–≥–µ–Ω—Ç—ã –¶–†–£ –ø—ã—Ç–∞—é—Ç—Å—è —É–∫—Ä–∞—Å—Ç—å —è–¥–µ—Ä–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –°–°–°–†. –ö–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —É–≥—Ä–æ–∑—É?"
        ),
        "choices": [
            {
                "text": "üïµÔ∏è –†–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö!",
                "effects": {
                    "nuclear_research": +1,
                    "economy": -1
                },
                "result": (
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è –∏–∑-–∑–∞ —Ä–µ–ø—Ä–µ—Å—Å–∏–π, –Ω–æ —É—Ç–µ—á–∫–∏ –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç—Å—è."
                ),
                "next_event": "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –†–î–°-1 (1949)"
            },
            {
                "text": "üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                "effects": {
                    "europe_influence": +1,
                    "us_relations": -2
                },
                "result": (
                    "–°–®–ê —Ç—Ä–∞—Ç—è—Ç —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –ª–æ–∂–Ω—ã–µ —Ü–µ–ª–∏, –Ω–æ —É—Å–∏–ª–∏–≤–∞—é—Ç —Ä–∞–∑–≤–µ–¥–∫—É."
                ),
                "next_event": "–û–ø–µ—Ä–∞—Ü–∏—è '–í–µ–Ω–æ–Ω–∞' (1948)"
            }
        ]
    },
    5: {
        "title": "–ë–µ—Ä–ª–∏–Ω—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (1948)",
        "description": (
            "–ó–∞–ø–∞–¥–Ω—ã–µ —Å–æ—é–∑–Ω–∏–∫–∏ –≤–≤–æ–¥—è—Ç –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É –≤ –ó–∞–ø–∞–¥–Ω–æ–º –ë–µ—Ä–ª–∏–Ω–µ. "
            "–ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤?"
        ),
        "choices": [
            {
                "text": "üöß –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥!",
                "effects": {
                    "military": +2,
                    "economy": -1
                },
                "check": lambda stats: stats.get('europe_influence', 0) >= 0,
                "result": (
                    "–í—ã –≤–≤–æ–¥–∏—Ç–µ –±–ª–æ–∫–∞–¥—É –ó–∞–ø–∞–¥–Ω–æ–≥–æ –ë–µ—Ä–ª–∏–Ω–∞. "
                    "{}"
                ),
                "next_event": "–°–æ–∑–¥–∞–Ω–∏–µ –ù–ê–¢–û (1949)"
            },
            {
                "text": "üí£ –£–≥—Ä–æ–∂–∞—Ç—å —è–¥–µ—Ä–Ω—ã–º —É–¥–∞—Ä–æ–º",
                "effects": {
                    "nuclear_research": +3,
                    "us_relations": -5
                },
                "result": "–¢—Ä—É–º—ç–Ω –≤—ã–¥–≤–∏–≥–∞–µ—Ç —É–ª—å—Ç–∏–º–∞—Ç—É–º. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞–Ω–Ω–∏–π –ö–∞—Ä–∏–±—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å.",
                "next_event": "–ö–∞—Ä–∏–±—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (1950)"
            }
        ]
    },
    99: {
        "title": "üìú –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ:",
        "choices": [
            {"text": "–ü–æ—Ç—Å–¥–∞–º—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (1945)", "callback": "history_potsdam"},
            {"text": "–§—É–ª—Ç–æ–Ω—Å–∫–∞—è —Ä–µ—á—å –ß–µ—Ä—á–∏–ª–ª—è (1946)", "callback": "history_churchill"},
            {"text": "–®–ø–∏–æ–Ω—Å–∫–∏–π —Å–∫–∞–Ω–¥–∞–ª (1946)", "callback": "history_spy"},
            {"text": "–ë–µ—Ä–ª–∏–Ω—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (1948)", "callback": "history_berlin"},

            {"text": "‚Ü©Ô∏è –ù–∞–∑–∞–¥", "callback": "back_to_main"}
        ]
    }
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    context.user_data['stats'] = {'reputation': 0, 'health': 100}
    chapter = game_data[1]

    await update.message.reply_text(
        text=f"{chapter['title']}\n\n{chapter['description']}",
        parse_mode='HTML',
        reply_markup=main_menu_keyboard()
    )


def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='new_game')],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞", callback_data='show_history')]
    ]
    return InlineKeyboardMarkup(keyboard)


async def show_potsdam_conference(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ü–æ—Ç—Å–¥–∞–º—Å–∫–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"""
    chapter = game_data[3]
    await update.callback_query.edit_message_text(
        text=f"<b>{chapter['title']}</b>\n\n{chapter['description']}",
        parse_mode='HTML',
        reply_markup=get_choices_keyboard(chapter)
    )


async def handle_potsdam_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞ –ü–æ—Ç—Å–¥–∞–º—Å–∫–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    choice_idx = int(query.data.split('_')[1])
    chapter = game_data[3]
    choice = chapter['choices'][choice_idx]

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    for stat, value in choice['effects'].items():
        context.user_data['stats'][stat] = context.user_data['stats'].get(stat, 0) + value

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
    context.user_data['last_choice'] = choice_idx

    if choice_idx == 1:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–£–∫—Ä–µ–ø–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø–µ"
        await show_berlin_crisis(update, context)
    elif choice_idx == 0:  # –Ø–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
        await show_spy_scandal(update, context)
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        result_message = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n{choice['result']}\n\n..."
        await query.edit_message_text(
            text=result_message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=choice['next_event'].lower().replace(" ", "_"))],
                [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )


async def show_berlin_crisis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ë–µ—Ä–ª–∏–Ω—Å–∫–æ–≥–æ –∫—Ä–∏–∑–∏—Å–∞"""
    chapter = game_data[5]
    keyboard = []

    for i, choice in enumerate(chapter['choices']):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'check' in choice:
            if choice['check'](context.user_data['stats']):
                keyboard.append([InlineKeyboardButton(choice["text"], callback_data=f"berlin_choice_{i}")])
        else:
            keyboard.append([InlineKeyboardButton(choice["text"], callback_data=f"berlin_choice_{i}")])

    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])

    await update.callback_query.edit_message_text(
        text=f"<b>{chapter['title']}</b>\n\n{chapter['description']}",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_berlin_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "<b>–ë–µ—Ä–ª–∏–Ω—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (1948)</b>\n\n"
        "–í 1948 –≥–æ–¥—É –°–°–°–† –Ω–∞—á–∞–ª –±–ª–æ–∫–∞–¥—É –ó–∞–ø–∞–¥–Ω–æ–≥–æ –ë–µ—Ä–ª–∏–Ω–∞, –ø—ã—Ç–∞—è—Å—å –≤—ã–Ω—É–¥–∏—Ç—å –∑–∞–ø–∞–¥–Ω—ã–µ –¥–µ—Ä–∂–∞–≤—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è "
        "–æ—Ç —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é –∑–∞–ø–∞–¥–Ω—ã—Ö –∑–æ–Ω –ì–µ—Ä–º–∞–Ω–∏–∏. –í –æ—Ç–≤–µ—Ç –°–®–ê –∏ –∏—Ö —Å–æ—é–∑–Ω–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ "
        "–≤–æ–∑–¥—É—à–Ω—ã–π –º–æ—Å—Ç, —Å–Ω–∞–±–∂–∞—è –≥–æ—Ä–æ–¥ –ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –∏ —Ç–æ–ø–ª–∏–≤–æ–º. –ë–ª–æ–∫–∞–¥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –∏ –∫—Ä–∏–∑–∏—Å —Å—Ç–∞–ª "
        "–æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–≤—ã—Ö –æ—Å—Ç—Ä—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –•–æ–ª–æ–¥–Ω–æ–π –≤–æ–π–Ω—ã."
    )

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data='show_history')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )


async def handle_berlin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –ë–µ—Ä–ª–∏–Ω—Å–∫–æ–º –∫—Ä–∏–∑–∏—Å–µ"""
    query = update.callback_query
    await query.answer()

    choice_idx = int(query.data.split('_')[-1])
    chapter = game_data[5]
    choice = chapter['choices'][choice_idx]

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    for stat, value in choice['effects'].items():
        context.user_data['stats'][stat] = context.user_data['stats'].get(stat, 0) + value

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = choice['result'].format('–ó–∞–ø–∞–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –≤–æ–∑–¥—É—à–Ω—ã–º –º–æ—Å—Ç–æ–º.')  # –ó–¥–µ—Å—å –∑–∞–ø–æ–ª–Ω–∏–º {}, –µ—Å–ª–∏ –µ—Å—Ç—å

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    result_message = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n{result_text}\n\n"
        f"<b>–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ:</b> {choice['next_event']}\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚öîÔ∏è –í–æ–µ–Ω–Ω–∞—è –º–æ—â—å: {context.user_data['stats'].get('military', 0)}\n"
        f"üè≠ –≠–∫–æ–Ω–æ–º–∏–∫–∞: {context.user_data['stats'].get('economy', 0)}\n"
        f"‚ò¢Ô∏è –Ø–¥–µ—Ä–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {context.user_data['stats'].get('nuclear_research', 0)}\n"
        f"üåç –í–ª–∏—è–Ω–∏–µ –≤ –ï–≤—Ä–æ–ø–µ: {context.user_data['stats'].get('europe_influence', 0)}\n"
        f"üá∫üá∏ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –°–®–ê: {context.user_data['stats'].get('us_relations', 0)}"
    )

    # –ö–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥"
    await query.edit_message_text(
        text=result_message,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=choice['next_event'].lower().replace(" ", "_"))],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )



async def show_spy_scandal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —à–ø–∏–æ–Ω—Å–∫–æ–≥–æ —Å–∫–∞–Ω–¥–∞–ª–∞"""
    chapter = game_data[4]
    keyboard = [
        [InlineKeyboardButton(choice["text"], callback_data=f"spy_choice_{i}")]
        for i, choice in enumerate(chapter['choices'])
    ]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])

    await update.callback_query.edit_message_text(
        text=f"<b>{chapter['title']}</b>\n\n{chapter['description']}",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_spy_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —à–ø–∏–æ–Ω—Å–∫–æ–º —Å–∫–∞–Ω–¥–∞–ª–µ"""
    query = update.callback_query
    await query.answer()

    choice_idx = int(query.data.split('_')[-1])
    chapter = game_data[4]
    choice = chapter['choices'][choice_idx]

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    for stat, value in choice['effects'].items():
        context.user_data['stats'][stat] = context.user_data['stats'].get(stat, 0) + value

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_message = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n{choice['result']}\n\n"
        f"<b>–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ:</b> {choice['next_event']}\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚ò¢Ô∏è –Ø–¥–µ—Ä–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {context.user_data['stats'].get('nuclear_research', 0)}\n"
        f"üè≠ –≠–∫–æ–Ω–æ–º–∏–∫–∞: {context.user_data['stats'].get('economy', 0)}\n"
        f"üåç –í–ª–∏—è–Ω–∏–µ –≤ –ï–≤—Ä–æ–ø–µ: {context.user_data['stats'].get('europe_influence', 0)}\n"
        f"üá∫üá∏ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –°–®–ê: {context.user_data['stats'].get('us_relations', 0)}"
    )

    await query.edit_message_text(
        text=result_message,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=choice['next_event'].lower().replace(" ", "_"))],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )


async def show_history_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–ø—Ä–∞–≤–æ–∫"""
    chapter = game_data[99]
    await update.callback_query.edit_message_text(
        text=f"<b>{chapter['title']}</b>\n\n{chapter['description']}",
        parse_mode='HTML',
        reply_markup=get_choices_keyboard(chapter)
    )


async def handle_churchill_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Å—Ü–µ–Ω–µ –ß–µ—Ä—á–∏–ª–ª—è –∏ –≤–µ–¥–µ—Ç –∫ –ü–æ—Ç—Å–¥–∞–º—É"""
    query = update.callback_query
    await query.answer()

    choice_idx = int(query.data.split('_')[-1])
    chapter = game_data[2]
    choice = chapter['choices'][choice_idx]

    for stat, value in choice['effects'].items():
        context.user_data['stats'][stat] = context.user_data['stats'].get(stat, 0) + value

    await show_potsdam_conference(update, context)

async def show_churchill_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "<b>–§—É–ª—Ç–æ–Ω—Å–∫–∞—è —Ä–µ—á—å –ß–µ—Ä—á–∏–ª–ª—è (1946)</b>\n\n"
        "–í –º–∞—Ä—Ç–µ 1946 –≥–æ–¥–∞ –≤ –Ω–µ–±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–∫–µ –§—É–ª—Ç–æ–Ω (—à—Ç–∞—Ç –ú–∏—Å—Å—É—Ä–∏, –°–®–ê) "
        "–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å –ø—Ä–æ–∏–∑–Ω—ë—Å –∑–Ω–∞–º–µ–Ω–∏—Ç—É—é —Ä–µ—á—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –æ–± —É–≥—Ä–æ–∑–µ, "
        "–∏—Å—Ö–æ–¥—è—â–µ–π –æ—Ç –°–æ–≤–µ—Ç—Å–∫–æ–≥–æ –°–æ—é–∑–∞, –∏ —É–ø–æ–º—è–Ω—É–ª –æ '–∂–µ–ª–µ–∑–Ω–æ–º –∑–∞–Ω–∞–≤–µ—Å–µ', "
        "—Ä–∞–∑–¥–µ–ª—è—é—â–µ–º –í–æ—Å—Ç–æ—á–Ω—É—é –∏ –ó–∞–ø–∞–¥–Ω—É—é –ï–≤—Ä–æ–ø—É. –≠—Ç–∞ —Ä–µ—á—å —Å—Ç–∞–ª–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–º –Ω–∞—á–∞–ª–æ–º –•–æ–ª–æ–¥–Ω–æ–π –≤–æ–π–Ω—ã."
    )

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data='show_history')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )

async def show_potsdam_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "<b>–ü–æ—Ç—Å–¥–∞–º—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (1945)</b>\n\n"
        "–õ–µ—Ç–æ–º 1945 –≥–æ–¥–∞ –ª–∏–¥–µ—Ä—ã –°–°–°–†, –°–®–ê –∏ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏ —Å–æ–±—Ä–∞–ª–∏—Å—å –≤ –ü–æ—Ç—Å–¥–∞–º–µ, —á—Ç–æ–±—ã "
        "—Ä–µ—à–∏—Ç—å —Å—É–¥—å–±—É –ø–æ—Å–ª–µ–≤–æ–µ–Ω–Ω–æ–≥–æ –º–∏—Ä–∞. –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ –Ω–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ì–µ—Ä–º–∞–Ω–∏–∏, "
        "–ø—Ä–æ–≥—Ä–∞–º–º—É –µ—ë –¥–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–ø–∞—Ä–∞—Ü–∏–∏. –í —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è –°–®–ê —Å–æ–æ–±—â–∏–ª–∏ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ç–æ–º–Ω–æ–π –±–æ–º–±—ã, "
        "—á—Ç–æ —É—Å–∏–ª–∏–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–æ—é–∑–Ω–∏–∫–∞–º–∏."
    )

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data='show_history')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )


async def show_spy_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "<b>–®–ø–∏–æ–Ω—Å–∫–∏–π —Å–∫–∞–Ω–¥–∞–ª (1946)</b>\n\n"
        "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã –°–®–ê –Ω–∞—á–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —Ä–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã–µ –æ "
        "—è–¥–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –°–°–°–†. –í –æ—Ç–≤–µ—Ç —Å–æ–≤–µ—Ç—Å–∫–∏–µ –æ—Ä–≥–∞–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å–∏–ª–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å, "
        "—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –≠—Ç–æ—Ç —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–≤–ª–∏—è–ª –Ω–∞ "
        "–≥–æ–Ω–∫—É —è–¥–µ—Ä–Ω—ã—Ö –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–≤—É—Ö —Å–≤–µ—Ä—Ö–¥–µ—Ä–∂–∞–≤."
    )

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data='show_history')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == 'new_game':
        await show_churchill_scene(update, context)
    elif query.data == 'show_history':
        await show_history_menu(update, context)
    elif query.data == 'back_to_main':
        await back_to_main(update, context)
    elif query.data == 'potsdam_conference':
        await show_potsdam_conference(update, context)
    elif query.data == 'churchill_speech':
        await show_churchill_scene(update, context)
    elif query.data == 'history_spy':
        await show_spy_history(update, context)
    elif query.data == 'history_churchill':
        await show_churchill_history(update, context)
    elif query.data == 'history_potsdam':
        await show_potsdam_history(update, context)
    elif query.data.startswith('choice_churchill_'):
        await handle_churchill_choice(update, context)
    elif query.data.startswith('choice_'):
        await handle_potsdam_choice(update, context)
    elif query.data.startswith('spy_choice_'):
        await handle_spy_choice(update, context)
    elif query.data.startswith('berlin_choice_'):
        await handle_berlin_choice(update, context)
    elif query.data.startswith('history_berlin'):
        await show_berlin_history(update, context)



async def show_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    chapter = game_data[1]
    await update.callback_query.edit_message_text(
        text=chapter['welcome_message'],
        reply_markup=get_choices_keyboard(chapter)
    )


async def show_churchill_scene(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω—É —Å –ß–µ—Ä—á–∏–ª–ª–µ–º"""
    chapter = game_data[2]
    keyboard = [
        [InlineKeyboardButton(choice["text"], callback_data=choice["callback"])]
        for choice in chapter['choices']
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')])

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=f"<b>{chapter['title']}</b>\n\n{chapter['description']}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            text=f"<b>{chapter['title']}</b>\n\n{chapter['description']}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def get_choices_keyboard(chapter):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞"""
    buttons = [
        [InlineKeyboardButton(choice["text"], callback_data=choice.get("callback", f"choice_{i}"))]
        for i, choice in enumerate(chapter['choices'])
    ]
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')])
    return InlineKeyboardMarkup(buttons)


async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞"""
    query = update.callback_query
    await query.answer()

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    await query.edit_message_text(
        text="–í—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ])
    )


async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.callback_query.edit_message_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    if update.effective_message:
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    if os.getenv("DEV_MODE"):
        application.run_polling()
    else:
        application.run_webhook()


if __name__ == '__main__':
    main()