import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import logging
from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

(MAIN_MENU, CHAPTER_SELECTION, PLAYING_CHAPTER) = range(3)
game_data = {
    1: {
        "title": "üü• –¢–û–í–ê–†–ò–© –°–¢–ê–õ–ò–ù, –°–û–í–ï–¢–£–ï–¢–°–Ø –ù–ê–†–û–î!",
        "description": (
            "1945 –≥–æ–¥. –ü–æ–±–µ–¥–∞ –Ω–∞–¥ —Ñ–∞—à–∏–∑–º–æ–º –æ–¥–µ—Ä–∂–∞–Ω–∞, –Ω–æ –Ω–æ–≤—ã–π –≤—Ä–∞–≥ —É–∂–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ–≤—É ‚Äî –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∏–º–ø–µ—Ä–∏–∞–ª–∏–∑–º.\n\n"
            "–¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç:\n"
            "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Å—É–¥—å–±–æ–Ω–æ—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è ‚Äî –æ—Ç —è–¥–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–π\n"
            "‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –º–µ–∂–¥—É –≤–æ–µ–Ω–Ω–æ–π –º–æ—â—å—é, —ç–∫–æ–Ω–æ–º–∏–∫–æ–π –∏ –≤–ª–∏—è–Ω–∏–µ–º\n"
            "‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ö–æ–¥ –•–æ–ª–æ–¥–Ω–æ–π –≤–æ–π–Ω—ã ‚Äî —Ç—Ä–∏—É–º—Ñ —Å–æ—Ü–∏–∞–ª–∏–∑–º–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –°–°–°–†\n\n"
            "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n\n"
            "–í—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π (–∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É)\n\n"
            "–°–ª–µ–¥–∏ –∑–∞ —Å–∫—Ä—ã—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
            "–î–æ–∂–∏–≤–∏ –¥–æ 1953 –≥–æ–¥–∞ –∏ —É–∑–Ω–∞–π, –∫–∞–∫–∏–º —Å—Ç–∞–ª –º–∏—Ä\n\n"
            "\"–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–Ω–∞–µ—Ç —Å–æ—Å–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏—è... –Ω–æ —Å–µ–≥–æ–¥–Ω—è –æ–Ω–∞ –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö!\""
        ),
        "scenes": [],
        "choices": [
            {"text": "‚û°Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "next_scene": 2, "effects": {}},
            {"text": "üìú –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞", "next_scene": 99, "effects": {}}
        ]
    },
    2: {
        "title": "–ü–µ—Ä–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "description": "–ú–∞—Ä—Ç 1946. –ß–µ—Ä—á–∏–ª–ª—å –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –§—É–ª—Ç–æ–Ω—Å–∫—É—é —Ä–µ—á—å –æ ¬´–∂–µ–ª–µ–∑–Ω–æ–º –∑–∞–Ω–∞–≤–µ—Å–µ¬ª...",
        "scenes": [],
        "choices": [
            {"text": "–†–µ–∑–∫–æ –æ—Å—É–¥–∏—Ç—å –≤ ¬´–ü—Ä–∞–≤–¥–µ¬ª", "effects": {"propaganda": 5}},
            {"text": "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", "effects": {"western_relations": 3}},
            {"text": "–¢–∞–π–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å –±–µ—Ä–ª–∏–Ω—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å", "effects": {"military": 7, "risk": 10}}
        ]
    }
}
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    context.user_data['state'] = MAIN_MENU
    context.user_data['stats'] = {'reputation': 0, 'health': 100}

    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}, –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –Ω–æ–≤–µ–ª–ª—É '1812'!\n\n"
        "–í—ã –æ–∫–∞–∂–µ—Ç–µ—Å—å –≤ –≥—É—â–µ —Å–æ–±—ã—Ç–∏–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã 1812 –≥–æ–¥–∞.",
        reply_markup=main_menu_keyboard()
    )


def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='new_game')],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥–ª–∞–≤—É", callback_data='select_chapter')]
    ]
    return InlineKeyboardMarkup(keyboard)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == 'new_game':
        await start_chapter(update, context, chapter_id=1)
    elif query.data == 'select_chapter':
        await show_chapters(update, context)


async def show_chapters(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤"""
    keyboard = [
        [InlineKeyboardButton(chapter["title"], callback_data=f'chapter_{chapter_id}')]
        for chapter_id, chapter in game_data.items()
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')])

    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def start_chapter(update: Update, context: ContextTypes.DEFAULT_TYPE, chapter_id: int) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≥–ª–∞–≤—É"""
    chapter = game_data[chapter_id]
    context.user_data['current_chapter'] = chapter_id
    context.user_data['current_scene'] = 0

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=f"<b>{chapter['title']}</b>\n\n{chapter['description']}\n\n{chapter['scenes'][0]}",
            parse_mode='HTML',
            reply_markup=get_scene_keyboard(chapter, 0)
        )
    else:
        await update.message.reply_text(
            text=f"<b>{chapter['title']}</b>\n\n{chapter['description']}\n\n{chapter['scenes'][0]}",
            parse_mode='HTML',
            reply_markup=get_scene_keyboard(chapter, 0)
        )


def get_scene_keyboard(chapter, scene_index: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ü–µ–Ω—ã"""
    buttons = [
        InlineKeyboardButton(choice["text"], callback_data=f'choice_{i}')
        for i, choice in enumerate(chapter['choices'])
    ]
    return InlineKeyboardMarkup([buttons])


async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞"""
    query = update.callback_query
    await query.answer()

    choice_idx = int(query.data.split('_')[1])
    chapter = game_data[context.user_data['current_chapter']]
    choice = chapter['choices'][choice_idx]

    for stat, value in choice['effects'].items():
        context.user_data['stats'][stat] = context.user_data['stats'].get(stat, 0) + value

    next_scene = choice['next_scene']
    if next_scene < len(chapter['scenes']):
        await query.edit_message_text(
            text=chapter['scenes'][next_scene],
            reply_markup=get_scene_keyboard(chapter, next_scene)
        )
    else:
        await query.edit_message_text(
            text=f"–ì–ª–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
                 f"–†–µ–ø—É—Ç–∞—Ü–∏—è: {context.user_data['stats']['reputation']}\n"
                 f"–ó–¥–æ—Ä–æ–≤—å–µ: {context.user_data['stats']['health']}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )


async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.callback_query.edit_message_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = Application.builder().token("BOT_TOKEN").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler, pattern='^new_game|select_chapter$'))
    application.add_handler(CallbackQueryHandler(handle_choice, pattern='^choice_'))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back_to_main$'))
    application.add_handler(CallbackQueryHandler(start_chapter, pattern='^chapter_'))

    # –ü–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if not os.getenv("DEV_MODE"):
        application.run_webhook()  # –ü—Ä–æ–¥–∞–∫—à–µ–Ω
    else:
        application.run_polling()  # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

if __name__ == '__main__':
    main()  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ main()